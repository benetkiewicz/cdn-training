---
import LessonLayout from "../../layouts/LessonLayout.astro";
import cdnDiagram from "../../../public/lesson1/cdn-diagram.png";
import CodeBlock from "../../components/CodeBlock.astro";
---

<LessonLayout>
    <h1>Lesson 1: Introduction to CDNs</h1>

    <h2>Basic Idea</h2>
    <p>
        Content Delivery Networks (CDNs) are a crucial part of modern web infrastructure. They are geographically
        distrubuted servers, which are physically and logically closer to the end user, delivering web content faster
        and more efficiently.
    </p>

    <p>
        The idea is that each client worldwide, instead of fetching content from one, centralized server across the
        world, can fetch content from a server that is closer to them. This reduces latency and improves the overall
        performance of the website. The process of determining which server is nearest and contains the requested
        content relies on protocols that govern the internet. Various CDN providers primarily use Anycast Routing or
        GeoDNS, both of which are integrated into the DNS protocol.
    </p>
    <p>
        The servers spread across the world are <em>Edge servers</em> or <em>POPs (Points of Presence)</em>. The server
        that actually server the content is called a <em>Origin Server</em>. Each POP contains a cached copy of the
        content. See the below diagram for a visual representation of how CDNs work.
    </p>
    <div class="image-wrapper">
        <img src={cdnDiagram.src} alt="CDN Diagram" />
    </div>
    <p>
        In some more advanced scenarios, one of the POPs has a special role of being a <em>Shield</em> server. Shield usually
        stands close to the origin server and is used as a kind of proxy to distribute content to the rest of the POPs network.
        Since the Shield is the only POP fetching content from the origin, it essentially shields the origin from the flood
        or requests coming from all POPs in the network.
    </p>
    <p>
        The content is cached in the POPs for a certain period of time, after which it is deleted to make space for new
        content. The length of the caching time, the parts of the content that should be cached and strategies for
        caching can be configured in many ways via the UI, HTTP headers being sent by origin or special scripting (such
        as VCL in Varnish) deployed as part of CDN configuration.
    </p>

    <h2>Other features of CDNs</h2>

    <p>CDNs can do much more than just cache content. They can also be used to:</p>
    <ul>
        <li>
            Filter incoming traffic, acting as a first line of defense agains not sophisticated attacks, like scraping o
            DoS.
        </li>
        <li>
            Dispatch traffic to multiple origins, load balancing between them or allowing downtime-free migrations
            between them.
        </li>
        <li>Allow to implement basic functionalities, like AUTH or A/B testing.</li>
        <li>Often are bundled with other features, like DDoS protection, WAFs, image iptimization,etc.</li>
    </ul>

    <h2>Fastly</h2>
    <p>
        The main focus in this course is Fastly, one of the most popular CDN providers. It is a perfect fit for our
        journey into the world of CDNs since it follows industry standards and offers free tier for projects with small
        traffic.
    </p>
    <p>
        There are a lot of competitors in this field: Akamai, Cloudflare, Cloudfront, etc. They may vary in terms of
        features they provide but underlying concepts are the same and after this course you should be able to
        understand how to use them as well.
    </p>

    <h2>Choice of Backend</h2>
    <p>
        The main goal of this course is deep understanding how POPs and Origin cooperate with each other. We'll be
        adjusting CDN configuration via Fastly UI and varnish code snippets but you must also know that backend can have
        a big impact on how caching works. Due to that, we'll be implementing a simple backend endpoints that will allow us to
        demonstrate all the concepts we'll cover in this course.
    </p>
    <p>
        You could work with a static website and still learn a lot. However, you'll need some control over your
        website's behavior to fully benefit from it. We'll be using some simple API endpoints to demonstrate the caching
        behavior and how to control it. We will also want to return some HTTP headers from the backend to impact the
        caching behavior. As long as you understand any the following code snippets, you should be good to go.
    </p>
    <CodeBlock
        code={`using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/", () => "Hello, World!");

app.Run();`}
        lang="csharp"
    />
    <CodeBlock
        code={`const http = require('http');

const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Hello, World!');
});

server.listen(3000, () => {
    console.log('Server is running on port 3000');
});`}
        lang="javascript"
    />
</LessonLayout>
